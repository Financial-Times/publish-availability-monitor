machine:
  environment:
    PROJECT_GOPATH: "${HOME}/.go_project"
    PROJECT_PARENT_PATH: "${PROJECT_GOPATH}/src/github.com/${CIRCLE_PROJECT_USERNAME}"
    PROJECT_PATH: "${PROJECT_PARENT_PATH}/${CIRCLE_PROJECT_REPONAME}"
    GOPATH: "${HOME}/.go_workspace:${PROJECT_GOPATH}"
  services:
    - docker

checkout:
  post:
    - mkdir -p "${PROJECT_PARENT_PATH}"
    - rsync -avC "${HOME}/${CIRCLE_PROJECT_REPONAME}/" "${PROJECT_PATH}"

dependencies:
  pre:
    - go get -u github.com/kardianos/govendor
  override:
    - cd $PROJECT_PATH && govendor sync
    - cd $PROJECT_PATH && go build -v

test:
  pre:
    - go get -u github.com/jstemmer/go-junit-report
    - go get -u github.com/mattn/goveralls
  override:
    - mkdir -p $CIRCLE_TEST_REPORTS/golang
    - cd $PROJECT_PATH && govendor test -race -v ./... | go-junit-report > $CIRCLE_TEST_REPORTS/golang/junit.xml
    - cd $PROJECT_PATH && go list ./... | grep -v vendor |awk -F/ '{print $4}' | xargs -I {} go test -v -cover -race -coverprofile=$CIRCLE_ARTIFACTS/test{}.out ./{}
    - cd $CIRCLE_ARTIFACTS && sed -i '1d' test*.out
    - |
      echo "mode: atomic" > $CIRCLE_ARTIFACTS/overall-coverage.result
    - cd $CIRCLE_ARTIFACTS && cat *.out >> overall-coverage.result
    - docker build --rm=false -t test/pam .
    - docker run -d -p 9200:8080 --env="ETCD_PEERS=http://localhost:2379" test/pam; sleep 3
    - curl --retry 10 --retry-delay 5 -v http://localhost:9200/__health
  post:
    - goveralls -coverprofile=$CIRCLE_ARTIFACTS/overall-coverage.result -service=circle-ci -repotoken=$COVERALLS_TOKEN
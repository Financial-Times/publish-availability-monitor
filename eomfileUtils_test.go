package main

import (
	"testing"
)

func TestIsMarkedDeleted_True(t *testing.T) {
	if !isMarkedDeleted(storyMarkedDeletedTrue) {
		t.Error("Expected True, the story IS marked deleted")
	}
}

func TestIsMarkedDeleted_False(t *testing.T) {
	if isMarkedDeleted(storyMarkedDeletedFalse) {
		t.Error("Expected False, the story IS NOT marked deleted")
	}
}

func TestIsMarkedDeleted_Image(t *testing.T) {
	if isMarkedDeleted(imageEomFile) {
		t.Error("Expected False, the story IS NOT marked deleted")
	}
}

var storyMarkedDeletedTrue = EomFile{
	UUID,
	"EOM::CompoundStory",
	content,
	attributesMarkedDeletedTrue,
	systemAttributes,
}

var imageEomFile = EomFile{
	UUID,
	"Image",
	"image bytes",
	"fooAttributes",
	"barsystemAttributes",
}

var storyMarkedDeletedFalse = EomFile{
	UUID,
	"EOM::CompoundStory",
	content,
	attributesMarkedDeletedFalse,
	systemAttributes,
}

const UUID = "e28b12f7-9796-3331-b030-05082f0b8157"
const systemAttributes = "<props><productInfo><name>FTcom</name><issueDate>20150915</issueDate></productInfo><workFolder>/FT/WorldNews</workFolder><subFolder>UKNews</subFolder></props>"
const content = ""
const attributesMarkedDeletedTrue = "<ObjectMetadata><OutputChannels><DIFTcom><DIFTcomMarkDeleted>True</DIFTcomMarkDeleted></DIFTcom></OutputChannels></ObjectMetadata>"
const attributesMarkedDeletedFalse = "<ObjectMetadata><OutputChannels><DIFTcom><DIFTcomMarkDeleted>False</DIFTcomMarkDeleted></DIFTcom></OutputChannels></ObjectMetadata>"
